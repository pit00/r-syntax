'.source.r, .source.rd.console':
  'Add Tick Marks':
    'prefix': 'rug'
    'body': 'rug(${1:jitter(${2:x})})'
  'Apply':
    'prefix': 'app'
    'body': 'apply(${1:X}, ${2:MARGIN}, ${3:FUN}, ${4:\...})'
  'Attach':
    'prefix': 'att'
    'body': 'attach(${1:frame})'
  'Cat':
    'prefix': 'cat'
    'body': 'cat(${1:file}, ${2:sep = ${3:""}}, ${4:fill = ${5:FALSE}}, ${6:labels = ${7:NULL}}, ${8:append = ${9:FALSE}})'
  'Cummulative max':
    'prefix': 'cumi'
    'body': 'cummax(${1:x})'
  'Cummulative min':
    'prefix': 'cuma'
    'body': 'cummin(${1:x})'
  'Data Frame':
    'prefix': 'daf'
    'body': 'data.frame(${1:\...}, ${2:row.names = ${3:NULL}}, ${4:check.rows = ${5:FALSE}}, ${6:check.names = ${7:TRUE}}, ${8:stringsAsFactors = ${9:default.stringsAsFactors()}})'
  'Density':
    'prefix': 'den'
    'body': 'density(${1:x}${2:, bw = ${3:bandwidth}})'
  'Detach':
    'prefix': 'det'
    'body': 'detach(${0:})'
  'Divide Into Intervals':
    'prefix': 'cut'
    'body': 'cut(${1:x}, breaks = c(${2:${3:}, ${4:max(${1:x})}}))'
  'Expand grid':
    'prefix': 'exp'
    'body': 'expand.grid(${1:\...}, ${2:KEEP.OUT.ATTRS = ${3:TRUE}}, ${4:stringsAsFactors = ${5:TRUE}})'
  'Factor':
    'prefix': 'fac'
    'body': 'factor(${1:x})'
  'For Loop':
    'prefix': 'for'
    'body': 'for (${1:i} in ${2:seq}) ${3:{$0\\}}'
  'Function':
    'prefix': 'fun'
    'body': 'function(${1:x}) ${3:{$0\\}}'
  'Generalized Linear Models':
    'prefix': 'glm'
    'body': 'glm(${1:formula}, ${2:family = {3:gaussian}}, ${4:data})'
  'Grep':
    'prefix': 'grep'
    'body': 'grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}})'
  'Grep':
    'prefix': 'grep'
    'body': 'grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}}, ${7:value = ${8:FALSE}}, ${9:fixed = ${10:TRUE}})'
  'Grep logical':
    'prefix': 'grepl'
    'body': 'grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}}, ${7:fixed = ${8:TRUE}})'
  'Ifelse':
    'prefix': 'ife'
    'body': 'ifelse(${1:test}, ${2:yes}, ${3:no})'
  'Install package':
    'prefix': 'ins'
    'body': 'install.packages(${1:pkgs}, ${2:lib}, ${3:repos = ${4:getOption("repos")}}, ${5:contriburl = ${6:contrib.url(repos, type)}})'
  'Kmeans':
    'prefix': 'km'
    'body': 'kmeans(${1:x}, ${2:centers}, ${3:iter.max = ${4:10}}, ${5:nstart = ${6:1}}, ${7:algorithm = ${8:c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen")}}, ${9:trace = ${10:FALSE}})'
  'Kruskal-Wallis Rank Sum test':
    'prefix': 'kr'
    'body': 'kruskal.test(${1:formula}, ${2:data}, ${3:subset}, ${4:na.action}, ${5:\...})'
  'Lapply':
    'prefix': 'lap'
    'body': 'lapply(${1:X}, ${2:FUN}, ${3:\...})'
  'Length':
    'prefix': 'len'
    'body': 'length(${1:x})'
  'Library':
    'prefix': 'lib'
    'body': 'library(${1:package}, ${2:help}, ${3:pos = ${4:2}}, ${5:lib.loc = ${6:NULL}})'
  'Load Dataset':
    'prefix': 'dat'
    'body': 'data(${1:name})'
  'Load RData':
    'prefix': 'loa'
    'body': 'load(${1:file}, ${2:envir = ${3:parent.frame()}}, ${4:verbose = ${5:FALSE}})'
  'Linear regression':
    'prefix': 'lm'
    'body': 'lm(${1:formula}, ${2:data}, ${3:subset}, ${4:weights}, ${5:na.action})'
  'Matrix':
    'prefix': 'mat'
    'body': 'matrix(${1:data = ${2:NA}}, ${3:nrow = ${4:1}}, ${5:ncol = ${6:1}}, ${7:byrow = ${8:FALSE}}, ${9:dimnames = ${10:NULL}})'
  'Mean':
    'prefix': 'mea'
    'body': 'mean(${1:x}${2:, na.rm=${3:FALSE}})'
  'Merge':
    'prefix': 'mer'
    'body': 'merge(${1:x}, ${2:y}, ${3:by = ${4:intersect(names(x), names(y))}}, ${5:all = ${6:FALSE}})'
  'Names':
    'prefix': 'nam'
    'body': 'names(${1:x})'
  'Options':
    'prefix': 'opt'
    'body': 'options(${1:\...})'
  'Order':
    'prefix': 'ord'
    'body': 'order(${1:\...}, ${2:na.last = ${3:TRUE}}, ${4:decreasing = ${5:FALSE}})'
  'Outer':
    'prefix': 'out'
    'body': 'outer(${1:X}, ${2:Y}, ${3:FUN = ${4:"*"}}, ${5:\...})'
  'Paste':
    'prefix': 'pas'
    'body': 'paste(${1:\...}, ${2:sep = ${3:" "}}, ${3:collapse = ${4:NULL}})'
  'Paste0':
    'prefix': 'pas0'
    'body': 'paste(${1:\...}, ${2:collapse = ${3:NULL}})'
  'Plot':
    'prefix': 'print'
    'body': 'plot(${1:x}, ${2:y}, ${3:\...})'
  'Points':
    'prefix': 'poi'
    'body': 'points(${1:x}, ${2:y = ${3:NULL}}, ${4:type = ${5:"p"}}, ${6:\...})'
  'Polygonal Line':
    'prefix': 'lin'
    'body': 'lines(${1:x}${2:, color=${3:red}})'
  'Print':
    'prefix': 'pri'
    'body': 'print(${1:x}, ${2:\...})'
  'Quantile':
    'prefix': 'qua'
    'body': 'quantile(${1:x}, ${2:probs = ${3:seq(0, 1, 0.25)}}, ${4:na.rm = ${5:FALSE}}, ${6:names = ${7:TRUE}}, ${8:type = ${9:7}}, ${10:\...})'
  'Read From csv':
    'prefix': 'reac'
    'body': 'read.csv("${1:filename}"${2:, header = ${3:TRUE},  sep = "${4:\\,}",  stringsAsFactors = ${5:FALSE}})'
  'Read From File':
    'prefix': 'reat'
    'body': 'read.table("${1:filename}"${2:, header = ${3:TRUE},  sep = "${4:\\t}",  stringsAsFactors = ${5:FALSE}})'
  'Rep':
    'prefix': 'rep'
    'body': 'rep(${1:x}, ${2:\...})'
  'Sample':
    'prefix': 'sam'
    'body': 'sample(${1:x}, ${2:size}, ${3:replace = ${4:FALSE}}, ${5:prob = ${6:NULL}})'
  'Sequence (from,to,by)':
    'prefix': 'seq'
    'body': 'seq(${1:from}, ${2:to}, ${3:by})'
  'Sort':
    'prefix': 'sor'
    'body': 'sort(${1:x})'
  'Source':
    'prefix': 'sou'
    'body': 'source(${1:"${2:}"}${3:, chdir = ${4:TRUE}})'
  'Standard deviation':
    'prefix': 'sd'
    'body': 'sd(${1:x}${2:, na.rm=${3:FALSE}})'
  'Table':
    'prefix': 'tab'
    'body': 'table(${1:\...})'
  'Tapply':
    'prefix': 'tap'
    'body': 'tapply(${1:X}, ${2:INDEX}, ${3:FUN = ${4:NULL}}, ${5:\...}, ${6:simplify = ${7:TRUE}})'
  'Unique':
    'prefix': 'uni'
    'body': 'unique(${1:x}, ${2:incomparables = ${3:FALSE}}, ${4:\...})'
  'Which':
    'prefix': 'whi'
    'body': 'which(${1:x}, ${2:arr.ind = ${3:FALSE}}, ${4:useNames = ${5:TRUE}})'
  'Write csv':
    'prefix': 'wric'
    'body': 'write.csv(${1:x}, ${2:file = ${3:""}}, ${4:append = ${5:FALSE}}, ${6:quote = ${7:TRUE}}, ${8:sep = ${9:" "}}'
  'File.choose':
    'prefix': 'fch'
    'body': '${1:file = }file.choose()${0:}'
  'Na.omit':
    'prefix': 'nao'
    'body': 'na.omit(${0:})'
